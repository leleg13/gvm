<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Torneo Pallavolo 2024 - Completo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .bracket-match { 
            height: 80px; 
            border: 2px solid #dee2e6;
            margin: 10px;
            padding: 10px;
            cursor: pointer;
            transition: all 0.3s;
            border-radius: 8px;
        }
        .bracket-match:hover {
            background-color: #f8f9fa;
            transform: scale(1.02);
        }
        .team-card { transition: transform 0.2s; }
        .team-card:hover { transform: scale(1.02); }
        .editable-score {
            width: 40px;
            text-align: center;
            border: 1px solid #ced4da;
            border-radius: 4px;
            padding: 2px;
        }
        .group-table th {
            background-color: #e9ecef;
        }
        .winner {
            background-color: #d4edda !important;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="bg-primary text-white p-3 text-center">
        <h1>üèê Torneo di Pallavolo 2024</h1>
    </header>

    <!-- Main Container -->
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav class="col-md-2 bg-light sidebar">
                <div class="position-sticky pt-3">
                    <ul class="nav flex-column" id="menu">
                        <li class="nav-item"><a class="nav-link active" href="#registrazione">Registrazioni</a></li>
                        <li class="nav-item"><a class="nav-link" href="#gironi">Gironi</a></li>
                        <li class="nav-item"><a class="nav-link" href="#playoff">Fasi Finali</a></li>
                        <li class="nav-item"><a class="nav-link" href="#classifica">Classifica</a></li>
                    </ul>
                    <div class="mt-3 p-2">
                        <button class="btn btn-sm btn-outline-danger w-100" onclick="localStorage.clear(); location.reload()">Reset Dati</button>
                    </div>
                </div>
            </nav>

            <!-- Main Content -->
            <main class="col-md-10 p-4">
                <!-- Registration Section -->
                <section id="registrazione">
                    <h2>Registrazione Squadre</h2>
                    <form id="teamForm" class="mb-4">
                        <!-- Form rimane uguale -->
                    </form>
                    <div id="teamsList" class="row"></div>
                </section>

                <!-- Groups Section -->
                <section id="gironi" style="display: none;">
                    <h2>Gestione Gironi</h2>
                    <div class="row" id="groupsContainer"></div>
                </section>

                <!-- Playoff Bracket -->
                <section id="playoff" style="display: none;">
                    <h2>Fasi Finali</h2>
                    <div class="row justify-content-center" id="bracketContainer"></div>
                </section>

                <!-- Standings -->
                <section id="classifica" style="display: none;">
                    <h2>Classifica Generale</h2>
                    <canvas id="standingsChart"></canvas>
                </section>
            </main>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.sheetjs.com/xlsx-0.20.0/package/dist/xlsx.full.min.js"></script>

    <script>
        // Gestione dati
        let tournamentData = JSON.parse(localStorage.getItem('tournamentData')) || {
            teams: [],
            groups: { A: [], B: [], C: [], D: [] },
            matches: [],
            bracket: {}
        };

        // Funzioni core
        function saveData() {
            localStorage.setItem('tournamentData', JSON.stringify(tournamentData));
            updateAllViews();
        }

        function updateAllViews() {
            updateTeamsList();
            populateGroups();
            generateMatches();
            updateStandings();
            generateBracket();
            updateChart();
        }

        // Registrazione squadre
        document.getElementById('teamForm').addEventListener('submit', (e) => {
            e.preventDefault();
            const inputs = e.target.elements;
            const team = {
                id: Date.now(),
                name: inputs[0].value,
                contact: inputs[1].value,
                email: inputs[2].value,
                payment: inputs[3].value,
                wins: 0,
                losses: 0,
                points: 0,
                setWon: 0,
                setLost: 0
            };
            tournamentData.teams.push(team);
            assignToGroups();
            saveData();
            e.target.reset();
        });

        function assignToGroups() {
            const groups = ['A', 'B', 'C', 'D'];
            tournamentData.teams.forEach((team, index) => {
                const group = groups[index % 4];
                if (!tournamentData.groups[group].some(t => t.id === team.id)) {
                    tournamentData.groups[group].push(team);
                }
            });
        }

        // Gestione gironi
        function populateGroups() {
            const container = document.getElementById('groupsContainer');
            let html = '';
            
            for (const group in tournamentData.groups) {
                html += `
                    <div class="col-md-3">
                        <div class="card mb-4">
                            <div class="card-header bg-info">Girone ${group}</div>
                            <table class="table group-table">
                                <thead>
                                    <tr>
                                        <th>Squadra</th>
                                        <th>V</th>
                                        <th>S</th>
                                        <th>P</th>
                                    </tr>
                                </thead>
                                <tbody id="groupBody${group}"></tbody>
                            </table>
                        </div>
                        <div id="matches${group}"></div>
                    </div>`;
            }
            container.innerHTML = html;
        }

        function generateMatches() {
            for (const group in tournamentData.groups) {
                const teams = tournamentData.groups[group];
                let matches = [];
                
                // Genera tutti gli accoppiamenti possibili
                for (let i = 0; i < teams.length; i++) {
                    for (let j = i + 1; j < teams.length; j++) {
                        const matchId = `${teams[i].id}-${teams[j].id}`;
                        if (!tournamentData.matches.some(m => m.id === matchId)) {
                            matches.push({
                                id: matchId,
                                team1: teams[i],
                                team2: teams[j],
                                score1: 0,
                                score2: 0,
                                group: group
                            });
                        }
                    }
                }
                
                // Aggiorna i match nel tournamentData
                tournamentData.matches = tournamentData.matches.filter(m => m.group !== group)
                                    .concat(matches);
            }
            renderMatches();
        }

        function renderMatches() {
            for (const group in tournamentData.groups) {
                const container = document.getElementById(`matches${group}`);
                if (!container) continue;
                
                const matches = tournamentData.matches.filter(m => m.group === group);
                let html = '<h5>Incontri:</h5>';
                
                matches.forEach(match => {
                    html += `
                        <div class="match-row mb-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <span>${match.team1.name}</span>
                                <div>
                                    <input type="number" class="editable-score" 
                                        value="${match.score1}" 
                                        onchange="updateScore('${match.id}', 1, this.value)">
                                    -
                                    <input type="number" class="editable-score" 
                                        value="${match.score2}" 
                                        onchange="updateScore('${match.id}', 2, this.value)">
                                </div>
                                <span>${match.team2.name}</span>
                            </div>
                        </div>`;
                });
                container.innerHTML = html;
            }
        }

        function updateScore(matchId, team, value) {
            const match = tournamentData.matches.find(m => m.id === matchId);
            if (team === 1) match.score1 = parseInt(value);
            else match.score2 = parseInt(value);
            
            // Aggiorna statistiche squadre
            const team1 = tournamentData.teams.find(t => t.id === match.team1.id);
            const team2 = tournamentData.teams.find(t => t.id === match.team2.id);
            
            team1.setWon += match.score1;
            team1.setLost += match.score2;
            team2.setWon += match.score2;
            team2.setLost += match.score1;
            
            if (match.score1 > match.score2) {
                team1.wins++;
                team2.losses++;
                team1.points += 3;
            } else {
                team2.wins++;
                team1.losses++;
                team2.points += 3;
            }
            
            saveData();
        }

        // Classifiche
        function updateStandings() {
            for (const group in tournamentData.groups) {
                const tbody = document.getElementById(`groupBody${group}`);
                if (!tbody) continue;
                
                const sorted = [...tournamentData.groups[group]].sort((a, b) => {
                    if (b.points !== a.points) return b.points - a.points;
                    return (b.setWon - b.setLost) - (a.setWon - a.setLost);
                });
                
                tbody.innerHTML = sorted.map(team => `
                    <tr>
                        <td>${team.name}</td>
                        <td>${team.wins}</td>
                        <td>${team.setWon}</td>
                        <td>${team.points}</td>
                    </tr>
                `).join('');
            }
        }

        // Fasi finali
        function generateBracket() {
            const topTeams = [];
            for (const group in tournamentData.groups) {
                const sorted = [...tournamentData.groups[group]].sort((a, b) => b.points - a.points);
                topTeams.push(...sorted.slice(0, 2));
            }
            
            const bracketContainer = document.getElementById('bracketContainer');
            bracketContainer.innerHTML = `
                <div class="col-md-8">
                    <div class="row">
                        <div class="col-md-6" id="quarterfinals"></div>
                        <div class="col-md-6" id="semifinals"></div>
                        <div class="col-md-12 text-center mt-4" id="final"></div>
                    </div>
                </div>`;
            
            generateRound(topTeams, 'quarterfinals', 'Quarti di finale', 4);
        }

        function generateRound(teams, containerId, title, matchCount) {
            const container = document.getElementById(containerId);
            let html = `<h5>${title}</h5>`;
            
            for (let i = 0; i < matchCount; i++) {
                const matchId = `match-${containerId}-${i}`;
                const team1 = teams[i * 2] || { name: 'TBD' };
                const team2 = teams[i * 2 + 1] || { name: 'TBD' };
                
                html += `
                    <div class="bracket-match" id="${matchId}" 
                         onclick="setWinner('${matchId}', '${team1.id}', '${team2.id}')">
                        <div class="team">${team1.name}</div>
                        <div class="team">${team2.name}</div>
                    </div>`;
            }
            container.innerHTML = html;
        }

        function setWinner(matchId, team1Id, team2Id) {
            const matchElement = document.getElementById(matchId);
            const winner = matchElement.querySelector('.team:hover');
            if (!winner) return;
            
            const winnerId = winner.textContent === tournamentData.teams.find(t => t.id === team1Id).name ? team1Id : team2Id;
            tournamentData.bracket[matchId] = winnerId;
            matchElement.classList.add('winner');
            saveData();
        }

        // Grafico
        let chartInstance;
        function updateChart() {
            const ctx = document.getElementById('standingsChart').getContext('2d');
            const teams = tournamentData.teams.sort((a, b) => b.points - a.points);
            
            if (chartInstance) chartInstance.destroy();
            
            chartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: teams.map(t => t.name),
                    datasets: [{
                        label: 'Punti',
                        data: teams.map(t => t.points),
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        borderColor: 'rgb(54, 162, 235)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: { y: { beginAtZero: true } }
                }
            });
        }

        // Inizializzazione
        assignToGroups();
        updateAllViews();
    </script>
</body>
</html>